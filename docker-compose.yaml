services:
  document_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: "document_service-document_service"
    environment:
      DOCUMENT_SERVICE_CONFIG_PATH: "./configs/app.docker.toml"
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      db_migrations:
        condition: service_completed_successfully

  ai_analyzer_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: "document_service-ai_analyzer_service"
    environment:
      DOCUMENT_SERVICE_CONFIG_PATH: "./configs/app.docker.toml"
    command: "uv run celery -A document_service.tasks.ai_tasks worker --loglevel=info"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      db_migrations:
        condition: service_completed_successfully

  db_migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: "document_service-db_migrations"
    environment:
      DOCUMENT_SERVICE_CONFIG_PATH: "./configs/app.docker.toml"
    command: "uv run alembic upgrade head"
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:16.0-alpine3.18
    container_name: "document_service-db"
    env_file:
      - configs/db.env
    ports:
      - "127.0.0.1:5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d mydb" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  redis:
    image: redis:7.2.4-alpine
    container_name: "document_service-redis"
    ports:
      - "127.0.0.1:6379:6379"
    restart: "unless-stopped"
    volumes:
      - "./configs/:/usr/local/etc/redis"
      - redis_data:/data
    command: "redis-server /usr/local/etc/redis/redis.conf"

  rabbitmq:
    image: rabbitmq:3.13.7-management
    container_name: "document_service-rabbitmq"
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/

  prometheus:
    image: prom/prometheus
    container_name: "document_service-prometheus"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus_data/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: unless-stopped


  grafana:
    image: grafana/grafana
    container_name: "document_service-grafana"
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning/datasources/:/etc/grafana/provisioning/datasources/
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped

  nuxt:
    build:
      context: .
      dockerfile: Dockerfile.nuxt
      args:
        PORT: 3000
    ports:
      - "3020:3000"
volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
